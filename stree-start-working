#!/usr/bin/env bash
. "$(git --exec-path)/git-sh-setup"
require_clean_work_tree checkout

# Read custom script settings
__top_level=$(git rev-parse --show-toplevel)
if [[ -f "${__top_level}/.git-scripts-config" ]]; then
  . "${__top_level}/.git-scripts-config"
fi

# DEFAULT_BRANCH can be set on config file OR environment variables
__parent_branch=${DEFAULT_BRANCH:-develop}
__owner_regex="s/(.+):([a-zA-Z0-9]+)\/([a-zA-Z0-9-]+)\.git/\2/"
__cd=/Applications/CocoaDialog.app/Contents/MacOS/CocoaDialog
__cancel_btn="Cancel"
__upstream_owner=$(git remote -v | grep upstream | grep fetch | awk '{print $2}' | sed -E "${__owner_regex}")
__fork_owner=$(git remote -v | grep origin | grep fetch | awk '{print $2}' | sed -E "${__owner_regex}")
__out=$($__cd standard-inputbox --title "Start Working" --informative-text "Enter base branch name, '${__parent_branch}' by default" --string-output --float)
__button=$(echo "$__out" | awk 'NR==1{print}')
__base_branch=$(echo "$__out" | awk 'NR>1{print}')

if [[ "$__button" = "$__cancel_btn" ]]; then
  exit 0
fi

if [[ -z "$__base_branch" ]]; then
  __base_branch=$__parent_branch
fi

printf "*** Base Branch: $__base_branch ***\n"


__out=$($__cd standard-dropdown --title "Start Working" --text "Enter task type" --items "feat" "fix" "docs" "style" "refactor" "perf" "test" "build" "ci" "chore" --string-output --float)
__button=$(echo "$__out" | awk 'NR==1{print}')
__type=$(echo "$__out" | awk 'NR>1{print}')

if [[ "$__button" = "$__cancel_btn" ]]; then
  exit 0
fi

printf "*** Task Type: ${__type} ***\n"


__out=$($__cd standard-inputbox --title "Start Working" --informative-text "Enter ticket number: GH-000, TAP-000, HEX-000" --string-output --float)
__button=$(echo "$__out" | awk 'NR==1{print}')
__ticket=$(echo "$__out" | awk 'NR>1{print}')

if [[ "$__button" = "$__cancel_btn" ]]; then
  exit 0
fi

if [[ -z "$__ticket" ]]; then
  exit 0
fi

__ticket=$(echo $__ticket | awk '{print toupper($0)}')

printf "*** Ticket Number: $__ticket ***\n"


__out=$($__cd standard-inputbox --title "Start Working" --informative-text "Enter task title" --string-output --float)
__button=$(echo "$__out" | awk 'NR==1{print}')
__title=$(echo "$__out" | awk 'NR>1{print}')

if [[ "$__button" = "$__cancel_btn" ]]; then
  exit 0
fi

if [[ -z "$__title" ]]; then
  exit 0
fi

printf "*** Task Title: $__title ***\n"

__top_level=$(git rev-parse --show-toplevel)
__pr_title="${__type}(${__ticket}): ${__title}"
__pr_body=$(<"${__top_level}/PULL_REQUEST_TEMPLATE.md")
__pr_message=$(printf "${__pr_title}\n\n<!--\n${__pr_body}\n-->")

git checkout $__base_branch && \
git fetch --tags --prune --all && \
git pull upstream $__base_branch && \
git push origin $__base_branch && \
git checkout -b $__ticket && \
git commit --allow-empty --message "$__title" && \
git push --set-upstream origin $__ticket && \
/usr/local/bin/hub pull-request -m "$__pr_message" -b "${__upstream_owner}:${__base_branch}" -h "${__fork_owner}:${__ticket}" -o
